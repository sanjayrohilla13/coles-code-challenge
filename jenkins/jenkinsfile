def STAGES_TO_RUN = params.stages

pipeline {
    agent any
    parameters {
        string(name: 'env', defaultValue: 'dev', description: 'Environment')
        string(name: 'branch', defaultValue: 'master', description: 'Enter the Git Branch for deploy')
        choice(name: 'stages', choices: ['terraform plan', 'terraform apply'])
    }

    environment {
        AWS_DEFAULT_REGION = 'ap-southeast-2'
    }

    stages {
        stage('GIT Pull') {
            steps {
                echo 'Downloading..'
                script {
                    git credentialsId: 'sanjayrohilla13', branch: 'master', url: 'https://github.com/sanjayrohilla13/coles-code-challenge.git', poll: false
                }
            }
        }

// Deploy Plan Stage
        stage('Terraform Plan') {
            when{
                expression{ STAGES_TO_RUN.contains('terraform plan')}
            }
            steps {
                withCredentials([aws(accessKeyVariable:'AWS_ACCESS_KEY_ID',credentialsId:'jenkins-aws-user',secretKeyVariable:'AWS_SECRET_ACCESS_KEY')]) {
                echo 'Deployment Plan'
                sh '''
                    cd terraform/domain/dev-app
                    terraform init --reconfigure
                    terraform plan
                '''
                }    
            }
        }

// Deploy Stage
        stage('Terraform Apply') {
            when{
                expression{ STAGES_TO_RUN.contains('terraform apply')}
            }
            steps {
                withCredentials([aws(accessKeyVariable:'AWS_ACCESS_KEY_ID',credentialsId:'jenkins-aws-user',secretKeyVariable:'AWS_SECRET_ACCESS_KEY')]) {
                echo 'Deployment'
                sh '''
                    cd terraform/domain/dev-app
                    terraform plan
                    terraform apply --auto-approve
                '''
                }    
            }
        }
    }
}